---
# geth time!
- name: Add go-ethereum PPA
  apt_repository:
    #repo: deb http://ppa.launchpad.net/ethereum/ethereum/ubuntu artful main
    repo: ppa:ethereum/ethereum
    state: present
    filename: go-ethereum

- name: Install ethereum package
  apt:
    pkg: ethereum
    state: present
    update_cache: true
   
- name: Install Parity package
  apt:
    deb: "https://releases.parity.io/v{{ parity_version }}/x86_64-unknown-linux-gnu/parity_{{ parity_version}}_ubuntu_amd64.deb"
    state: present
    update_cache: true

- name: Check if the chaindata directory exists
  stat:
    path: "{{ base_path }}/geth"
  register: chaindata

- name: Install lvm2
  apt: name=lvm2 state=present
  when: config_lvm and chaindata.stat.exists == False

- name: Create chaindata LVM volume group
  lvg: vg=blockchain-vg pvs={{ data_disk }} state=present
  when: config_lvm and chaindata.stat.exists == False

- name: Create chaindata LVM logical volume
  lvol: vg=blockchain-vg lv=blockchain-lv size='100%FREE'
  when: config_lvm and chaindata.stat.exists == False

- name: Create filesystem on LVM logical volume
  filesystem: fstype=ext4 dev=/dev/blockchain-vg/blockchain-lv
  when: config_lvm and chaindata.stat.exists == False

- name: Mount chaindata filesystem
  mount: 
    path: "{{ base_path }}"
    src: /dev/blockchain-vg/blockchain-lv 
    fstype: ext4 
    state: mounted
    opts: rw,user
  when: config_lvm and chaindata.stat.exists == False

- name: Create Geth and Parity directories
  file:
    path: "{{ base_path }}/{{ item }}"
    state: directory
    owner: "{{ geth_user }}"
    mode: 0755
  with_items:
    - "parity"
    - "geth"
    - "geth-ropsten"
  when: chaindata.stat.exists == False

# TODO: register a service and create a handler
 
- name: Install blockchain systemd services
  template:
    src: "{{ item.name }}.service"
    dest: "/lib/systemd/system/{{ item.name }}-{{ item.network }}.service"
    owner: root
    group: root
    mode: 0644
  with_items: "{{ blockchain_apps }}"
  vars:
    - sport: "{{ item.sport }}"
    - ws_sport: "{{ item.ws_sport }}"
    - p2p: "{{ item.p2p }}"
    - ropsten: "{{ true if item.network == 'ropsten' else false }}"

- name: Start blockchain systemd services
  systemd: 
    daemon_reload: yes
    state: "{{ 'started' if item.enabled == true else 'stopped' }}"
    enabled: "{{ item.enabled }}"
    name: "{{ item.name }}-{{ item.network }}.service"
  with_items: "{{ blockchain_apps }}"

# Reverse SSH tunnel time!

- name: Install SSH tunnel systemd service
  template:
    src: secure-tunnel@.service
    dest: /etc/systemd/system/secure-tunnel@.service
    owner: root
    group: root
    mode: 0644

- name: Install secure-tunnel defaults
  template:
    src: secure-tunnel-defaults
    dest: /etc/default/secure-tunnel@{{ item.name }}
    owner: root
    group: root
    mode: 0644
  with_items: "{{ ssh_tunnels }}"
  vars:
    - dport: "{{ item.dport }}"
    - sport: "{{ item.sport }}"
    - ssh_hostname: "{{ item.ssh_hostname }}"

- name: Install private key for tunnels
  copy:
    src: geth-http
    dest: /etc/ssh/{{ private_key_name }}
    owner: root
    group: root
    mode: 0600

- name: Start ssh tunnel systemd service
  systemd: 
    daemon_reload: yes
    state: started
    enabled: true
    name: secure-tunnel@{{ item.name }}.service
  with_items: "{{ ssh_tunnels }}"

- name: Install Nginx
  apt: pkg=nginx state=present update_cache=true

- name: Copy configuration for Nginx proxy
  template: src=nginx-munin.conf dest=/etc/nginx/sites-available/default
  notify: Restart Nginx

- name: Install Python3 for munin plugins
  apt: pkg=python3 state=present update_cache=true

- name: Install munin plugins for geth monitoring
  copy:
    src: "{{ item }}"
    dest: "/usr/share/munin/plugins/{{ item }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - block_number.py 
    - peer_count.py

- name: Activate munin plugins for geth monitoring
  file:
    src: "/usr/share/munin/plugins/{{ item }}.py"
    dest: "/etc/munin/plugins/{{ item }}"
    owner: root
    group: root
    state: link
  with_items:
    - block_number
    - peer_count

- name: Enable munin alerting based on load and Geth peers
  blockinfile:
    path: /etc/munin/plugin-conf.d/munin-node
    marker_begin: ""
    marker_end: ""
    block: |
      [load]
      env.MUNIN_LIBDIR /usr/share/munin/
      env.load_warning 2
      env.load_critical 4
      
      [peer_count]
      user root

- name: Install PagerDuty client for munin
  template:
    src: "pagerduty_munin.py"
    dest: "/usr/local/bin/pagerduty_munin.py"
    owner: root
    group: root
    mode: 0755

- name: Enable PagerDuty notifications for the Geth host
  lineinfile:
    path: /etc/munin/munin-conf.d/hosts.conf
    insertafter: "use_node_name yes"
    line: "    contacts pagerduty"
  notify: Restart Munin

- name: Enable PagerDuty notifications based on munin metrics
  blockinfile:
    path: /etc/munin/munin.conf
    block: |
      contact.pagerduty.command /usr/local/bin/pagerduty_munin.py
      contact.pagerduty.always_send critical
  notify: Restart Munin
